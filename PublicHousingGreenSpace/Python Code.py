# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-06-26 13:20:17
"""
import arcpy
import csv
import time
from arcpy.ia import *
from arcpy.sa import *

# To allow overwriting outputs change overwriteOutput option to True.
arcpy.env.overwriteOutput = True

# Check out any necessary licenses.
arcpy.CheckOutExtension("3D")
arcpy.CheckOutExtension("spatial")
arcpy.CheckOutExtension("ImageExt")
arcpy.CheckOutExtension("ImageAnalyst")

Public_Housing_Buildings_shp = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\Public_Housing_Buildings_6724785357917671457\\Public_Housing_Buildings.shp"
UrbanAreasOver1m = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\PublicHousingGreenSpace\\PublicHousingGreenSpace.gdb\\UrbanAreasOver1m"
USA_Census_Urban_Areas = "USA Census Urban Areas"

def prCyan(skk): print("\033[96m {}\033[00m" .format(skk))
def prRed(skk): print("\033[91m {}\033[00m" .format(skk))
def prGreen(skk): print("\033[92m {}\033[00m" .format(skk))

# Process: Select (2) (Select) (analysis)
PublicHousingSelect = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\PublicHousingGreenSpace\\PublicHousingGreenSpace.gdb\\PublicHousingIntersectSelect"
arcpy.analysis.Select(in_features=Public_Housing_Buildings_shp, out_feature_class=PublicHousingSelect, where_clause="TOTAL_OCCU >= 10")
print("Selected buildings with >= 10 occupants")

# listOfCities = 
with arcpy.da.SearchCursor(UrbanAreasOver1m, ["UA_CODE", "ShortName"]) as aListOfCities:
    
    for aCity in aListOfCities:
        
        print("waiting for previous process to finish...") #new
        time.sleep(3)
        
        NDVI_urbanareas_tif = arcpy.Raster("C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\NDVI_rasters\\geog4060\\NDVI_urbanareas_" + str(aCity[1]) + ".tif") # dependent on selected city

        prCyan("Started statistics on " + str(aCity[1]))

        # Process: Select (Select) (analysis)
        UrbanArea_Select = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\PublicHousingGreenSpace\\PublicHousingGreenSpace.gdb\\UrbanArea_Select"
        arcpy.analysis.Select(in_features=UrbanAreasOver1m, out_feature_class=UrbanArea_Select, where_clause='"UA_CODE" = \'' + str(aCity[0]) + '\'') #where clause = city id

        # Process: Pairwise Intersect (Pairwise Intersect) (analysis)
        PublicHousing_Intersect = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\PublicHousingGreenSpace\\PublicHousingGreenSpace.gdb\\PublicHousing_Intersect"
        arcpy.analysis.PairwiseIntersect(in_features=[PublicHousingSelect, UrbanArea_Select], out_feature_class=PublicHousing_Intersect, output_type="POINT")
        print("Intersected building points with " + str(aCity[1]) + " polygon")

        if str(arcpy.management.GetCount(PublicHousing_Intersect)) == "0":
            prRed("Area " + str(aCity[1]) + " contained no records, skipping to next area")
            continue
        else:
            print("Found " + str(arcpy.management.GetCount(PublicHousing_Intersect)) + " records")

        # Process: Buffer (Buffer) (analysis)
        #PublicHousing_Buffer = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\PublicHousingGreenSpace\\PublicHousingGreenSpace.gdb\\PublicHousing_Buffer.shp"
        PublicHousing_Buffer_shp = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\temporaryData\\PublicHousing_Buffer.shp"
        arcpy.analysis.Buffer(in_features=PublicHousing_Intersect, out_feature_class=PublicHousing_Buffer_shp, buffer_distance_or_field="1 Miles")
        print("Buffered building features")
        print(arcpy.management.GetCount(PublicHousing_Buffer_shp))

        # Process: Reclassify (Reclassify) (sa)
        #Reclass_NDVI = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\PublicHousingGreenSpace\\PublicHousingGreenSpace.gdb\\Reclass_NDVI2"
        Reclass_NDVI_tif = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\temporaryData\\Reclass_NDVI.tif"
        Reclassify = Reclass_NDVI_tif
        Reclass_NDVI_tif = arcpy.sa.Reclassify(NDVI_urbanareas_tif, "Value", "-1 -0.050000 NODATA;-0.050000 0.500000 0;0.500000 1 1", "NODATA")
        Reclass_NDVI_tif.save(Reclassify)
        print("Classified green space")

        # Process: Zonal Statistics as Table (Zonal Statistics as Table) (ia)
        PublicHousing_dbf = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\outputs\\" + str(aCity[1]) + "PH.dbf" #rename for each new city (or append)
        PublicHousing = ""
        arcpy.sa.ZonalStatisticsAsTable(PublicHousing_Buffer_shp, "DEVELOPMEN", Reclass_NDVI_tif, PublicHousing_dbf, "DATA", "MEAN", "CURRENT_SLICE", [90], "AUTO_DETECT", "ARITHMETIC", 360, PublicHousing)
        #.save(Zonal_Statistics_as_Table)
        print("Completed building zonal statistics")
        print(arcpy.management.GetCount(PublicHousing_dbf))

        # Process: Zonal Statistics as Table (2) (Zonal Statistics as Table) (ia)
        Citywide_dbf = "C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\outputs\\" + str(aCity[1]) + "Citywide.dbf" #rename for each new city (or append)
        Citywide = ""
        arcpy.ia.ZonalStatisticsAsTable(UrbanArea_Select, "NAME", Reclass_NDVI_tif, Citywide_dbf, "DATA", "ALL", "CURRENT_SLICE", [90], "AUTO_DETECT", "ARITHMETIC", 360, Citywide)
        #.save(Zonal_Statistics_as_Table_2_)
        print("Completed citywide zonal statistics")
        print(arcpy.management.GetCount(Citywide_dbf))

        print("waiting for previous process to finish...")
        time.sleep(3)
    #for aCity in aListOfCities:
        locList = []
        numRecordsWritten = 0
        with arcpy.da.SearchCursor("C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\outputs\\" + str(aCity[1]) + "PH.dbf", ["DEVELOPMEN", "MEAN", "STD", "MAJORITY"]) as buildingDataList: #update with new object id
            for aBuilding in buildingDataList:
                locList.append([aCity[1], aBuilding[0], aBuilding[1], aBuilding[2], aBuilding[3]])
                numRecordsWritten += 1
                print(numRecordsWritten)
                time.sleep(0.1)
        print(numRecordsWritten)
        with arcpy.da.SearchCursor("C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\outputs\\" + str(aCity[1]) + "Citywide.dbf", ["ZONE_CODE", "MEAN", "STD", "MAJORITY"]) as citywideDataList:
            for aCitywide in citywideDataList:
                locList.append([aCity[1], "Citywide", aCitywide[1], aCitywide[2], aCitywide[3]])
        
        with open("C:\\Users\\samdm\\OneDrive\\Desktop\\geog4060finalproj\\outputs\\output.csv", "a", newline="") as outputCSV:
            outputWriter = csv.writer(outputCSV)
            for aLoc in locList:
                outputWriter.writerow(aLoc)
        prGreen("Completed statistics for " + str(aCity[1]) + ", data written to output.csv")


print("Finished")
