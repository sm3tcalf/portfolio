function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

var dataset = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate('2023-06-01', '2023-08-31')
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',5))
                  .map(maskS2clouds);

// Compute the Normalized Difference Vegetation Index (NDVI).
var nir = dataset.mean().select('B8');
var red = dataset.mean().select('B4');
var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');

// Function to export an image for each polygon
var exportImageForPolygon = function(feature) {
  // Get the polygon's geometry
  var geometry = feature.geometry();
  
  // Clip the NDVI image to the polygon's geometry
  var clippedImage = ndvi.clip(geometry);
  
  // Define the export parameters
  var exportParams = {
    image: clippedImage,
    description: 'NDVI_' + feature.id().getInfo(),
    folder: 'geog4060',
    fileNamePrefix: 'NDVI_urbanareas_map_' + feature.id().getInfo(),
    region: geometry,
    scale: 10,
    maxPixels: 1e9
  };
  
  // Export the image to Google Drive
  Export.image.toDrive(exportParams);
};

// Iterate over each polygon in the FeatureCollection and export the corresponding image
table.evaluate(function(fc) {
  fc.features.forEach(function(f) {
    var feature = ee.Feature(f);
    exportImageForPolygon(feature);
  });
});
